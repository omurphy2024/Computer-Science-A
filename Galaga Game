/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package galagagame;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Random;

/**
 *
 * @author omurphy2024
 */

public class GalagaGame extends JPanel implements ActionListener {

    //private varibles for player, enemy, and user interface
    private final int WIDTH = 800;
    private final int HEIGHT = 600;
    private final int PLAYER_WIDTH = 50;
    private final int PLAYER_HEIGHT = 50;
    private final int ENEMY_WIDTH = 20;
    private final int ENEMY_HEIGHT = 20;
    private final int PLAYER_SPEED = 5;
    private final int ENEMY_COUNT = 5;
    private final int INITIAL_DELAY = 1000;
    private Timer timer;
    private boolean ingame;
    private Player player;
    private ArrayList<Enemy> enemies;
    private int wave = 1;
    private int enemySpeed = 1;
    private JButton startButton;
    private JButton rulesButton;
    private JFrame frame;
    private JTextArea rulesTextArea; // Text area for displaying rules

//referring to main private void
    public GalagaGame() {
        Game();
    }

   // starting the dimensions of user interface and the timer
    private void Game() {
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        setBackground(Color.WHITE);
        setFocusable(true);
        ingame = true;
        player = new Player();
        Enemies();
        timer = new Timer(5, this);
        timer.start();
        addKeyListener(new PlayerControls(player));
        // Initialize rules text area
        rulesTextArea = new JTextArea();
        //Rules text
        rulesTextArea.setText("                             Rules:\n1. Use arrow keys to avoid enemy ships."
                + "\n2. Survive as long as possible!");
        rulesTextArea.setEditable(false);
        rulesTextArea.setOpaque(false);
        rulesTextArea.setForeground(Color.BLACK);
        rulesTextArea.setFont(new Font("Helvetica", Font.BOLD, 16));
        add(rulesTextArea);
    }

    //Enemies move negative on the y axis (towards player)
    private void Enemies() {
        enemies = new ArrayList<>();
        Random random = new Random();
        for (int i = 0; i < ENEMY_COUNT; i++) {
            int x = random.nextInt(WIDTH - ENEMY_WIDTH);
            int y = -ENEMY_HEIGHT - random.nextInt(HEIGHT / 2);
            if (wave >= 10) {
                enemies.add(new LateralEnemy(x, y, ENEMY_WIDTH, ENEMY_HEIGHT, Color.RED));
            } else {
                enemies.add(new Enemy(x, y, ENEMY_WIDTH, ENEMY_HEIGHT, Color.RED));
            }
        }
    }

    //referring to user interface paint
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (ingame) {
            Objects(g);
        } else {
            GameOver(g);
        }
        Toolkit.getDefaultToolkit().sync();
    }

    private void Objects(Graphics g) {
        player.draw(g);
        for (Enemy enemy : enemies) {
            enemy.draw(g);
        }
    }
    
    //when player loses, game stops and shows game over text
    private void GameOver(Graphics g) {
        String msg = "Game Over!! Waves Survived: " + (wave - 1);
        Font small = new Font("Helvetica", Font.BOLD, 20);
        FontMetrics fm = getFontMetrics(small);
        g.setColor(Color.BLACK);
        g.setFont(small);
        g.drawString(msg, (WIDTH - fm.stringWidth(msg)) / 2, HEIGHT / 2);
    }

    //constantly updating checking if player is alive
    private void update() {
        player.move();
        for (Enemy enemy : enemies) {
            enemy.move();
        }
        checkCollisions();
    }

    //checking if enemy is overlapping with player
    private void checkCollisions() {
        Rectangle playerRect = player.getBounds();
        for (int i = 0; i < enemies.size(); i++) {
            Enemy enemy = enemies.get(i);
            Rectangle enemyRect = enemy.getBounds();
            if (playerRect.intersects(enemyRect)) {
                ingame = false;
                return;
            }
            if (enemy.getY() > player.getY() + PLAYER_HEIGHT) {
                enemies.remove(i);
                if (enemies.isEmpty()) {
                    wave++;
                    increaseEnemySpeed();
                    Enemies();
                    break;
                }
            }
        }
    }

    //enmey speed is increased each wave
    private void increaseEnemySpeed() {
        enemySpeed += 1;
    }

    //in game updater and refers to rules
    @Override
    public void actionPerformed(ActionEvent e) {
    if (e.getSource() == startButton) {
        ingame = true;
        Game();
        timer.start();
    } else if (e.getSource() == rulesButton) {
        // Implement rules action here
        JOptionPane.showMessageDialog(this, "Game Rules: \n - Use arrow keys to move your player"
                + "\n - Avoid enemy ships\n - Survive as many waves as possible", 
                "Game Rules", JOptionPane.INFORMATION_MESSAGE);
    } else {
        if (ingame) {
            update();
        } else {
            timer.stop();
        }
        repaint();
    }
    }

    //inheritance for player from game object
    private class Player extends GameObject {
        private int dx;

        public Player() {
            super(WIDTH / 2 - PLAYER_WIDTH / 2, HEIGHT - PLAYER_HEIGHT - 10, PLAYER_WIDTH, PLAYER_HEIGHT, Color.BLACK);
            dx = 0;
        }

        public void move() {
            x += dx;
            if (x < 0) {
                x = 0;
            }
            if (x > WIDTH - width) {
                x = WIDTH - width;
            }
        }

        public void setDx(int dx) {
            this.dx = dx;
        }
    }

    //inheritance for enemy from game object
    private class Enemy extends GameObject {
        public Enemy(int x, int y, int width, int height, Color color) {
            super(x, y, width, height, color);
        }

        public void move() {
            y += enemySpeed;
        }
    }

    //enemies start laterally moving after round 10 through inheritance
private class LateralEnemy extends Enemy {
    private int dx; // Lateral movement speed

    public LateralEnemy(int x, int y, int width, int height, Color color) {
        super(x, y, width, height, color);
        Random random = new Random();
        // Randomly choose initial lateral movement direction
        dx = random.nextBoolean() ? 3 : -3; // Either 3 (right) or -3 (left)
    }

    //player movement mechanics - arrow keys
    @Override
    public void move() {
        super.move(); // Vertical movement
        if (x <= 0) {
            dx = 3; // Move right if hitting left edge
        } else if (x >= WIDTH - width) {
            dx = -3; // Move left if hitting right edge
        }
        x += dx;
    }
}

//player controllers from key adapter inheritance
    private class PlayerControls extends KeyAdapter {
        private Player player;

        public PlayerControls(Player player) {
            this.player = player;
        }

        @Override
        public void keyPressed(KeyEvent e) {
            int key = e.getKeyCode();
            if (key == KeyEvent.VK_LEFT) {
                player.setDx(-PLAYER_SPEED);
            }
            if (key == KeyEvent.VK_RIGHT) {
                player.setDx(PLAYER_SPEED);
            }
        }

        @Override
        public void keyReleased(KeyEvent e) {
            int key = e.getKeyCode();
            if (key == KeyEvent.VK_LEFT || key == KeyEvent.VK_RIGHT) {
                player.setDx(0);
            }
        }
    }

    private class GameObject {
        protected int x;
        protected int y;
        protected int width;
        protected int height;
        protected Color color;

        public GameObject(int x, int y, int width, int height, Color color) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.color = color;
        }

        public void draw(Graphics g) {
            g.setColor(color);
            g.fillRect(x, y, width, height);
        }

        public Rectangle getBounds() {
            return new Rectangle(x, y, width, height);
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }
    }

    //setting up jframe - UI
    public static void main(String[] args) {
        JFrame frame = new JFrame("Galaga");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add(new GalagaGame());
        frame.pack();
        frame.setVisible(true);
    }
    
}
